doMergesort([int] a, int start, int end, [int] buffer) -> void {
	if (start < end) {
		int mid = start + (start - end) / 2;
		mid = start + (end - start) / 2;
		doMergesort(a, start, mid, buffer);
		doMergesort(a, mid + 1, end, buffer);
		merge(a, start, mid, end, buffer);
	}
}

merge([int] a, int start, int mid, int end, [int] buffer) -> void {
	int i = 0;
	int j = mid + 1;
	int k = start;

	for (i = start; i <= end; i = i + 1) {
		buffer[i] = a[i];
	}
	i = start;

	while (i <= mid and j <= end) {
		if (buffer[i] <= buffer[j]) {
			a[k] = buffer[i];
			i = i + 1;
		}
		else {
			a[k] = buffer[j];
			j = j + 1;
		}

		k = k + 1;
	}

	while (i <= mid) {
		a[k] = buffer[i];
		k = k + 1;
		i = i + 1;
	}

}

mergesort([int] a, int length) -> void {
	if (length < 2) {
		return;
	}

	[int] buffer = [int, length];
	doMergesort(a, 0, length, buffer);
}

print_array([int] a, int length) -> void {
	int i;
	for (i = 0; i < length; i = i + 1) {
		print_int(a[i]);

		if (i < length - 1) {
			print_string(" ");
		}
	}

	print_string("\n");
}


main() -> int {
	int length = 20;
	[int] a = [int, length];

	int i;
	for (i = 0; i < length; i = i + 1) {
		a[i] = i % 5;
	}


	print_string("Unsorted: \n");
	print_array(a, length);

	print_string("Sorted: \n");
	mergesort(a, length);
	print_array(a, length);

	a[0] = 50;
	a[1] = 3;
	a[2] = -1;
	a[3] = -100;
	a[4] = 20;
	a[5] = 90;
	a[6] = 5;
	a[7] = 3;
	a[8] = 10;
	a[9] = 20;
	a[10] = 0;
	a[11] = -20;
	a[12] = -20;
	a[13] = 60;
	a[14] = 60;
	a[15] = 5;
	a[16] = 80;
	a[17] = 70;
	a[18] = 10;
	a[19] = 100;

	print_string("Unsorted: \n");
	print_array(a, length);

	print_string("Sorted: \n");
	mergesort(a, length);
	print_array(a, length);

	return 0;
}
